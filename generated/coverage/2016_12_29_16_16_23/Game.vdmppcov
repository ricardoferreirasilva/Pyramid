class Game
-- Pyramid has 28 cards.
types
	public String = seq of char;

instance variables
		private deck: seq of nat;
		private workingDeck: seq of nat;
		
		
		-- The Stock: The facedown pile on the bottom left. It is used to draw cards from and put on the Waste.
		public stock: seq of nat;
		-- The Waste: The faceup pile next to the Stock. Cards on the Waste can be matched to cards in the Pyramid to get rid of the Pyramid cards.
		public waste: seq of nat;
		-- The Pyramid: Where the cards are stored
		public pyramid: seq of seq of nat;
		
		-- Card Information
		private suits: seq of String := ["H", "D", "S", "C"];
		private ranks: seq of String := ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"];
		
		inv len deck = 52;
operations
    -- create g := new Game();
		public Game: () ==> Game
		Game() == 
		(
			waste := [];
			pyramid := [];
			stock := [];
			deck := [1,2,3,4,5,6,7,8,9,10,
			11,12,13,14,15,16,17,18,19,20,
			21,22,23,24,25,26,27,28,29,30,
			31,32,33,34,35,36,37,38,39,40,
			41,42,43,44,45,46,47,48,49,50,
			51,52];
			shuffle();
			
			-- cardDeck := [];
    	-- for counter = 1 to len deck do
    	-- (
    	-- 	dcl c : Card;
    	--	c := new Card(counter,nil,nil);
    	-- 	cardDeck := cardDeck ^ [c];				
			-- );
			IO`print("Game started.\n");
			IO`print("Deck shuffled.\n");
			createPyramid();
			return self;
			
		);

    
    -- print g.shuffle();
    public shuffle: () ==> ()
    shuffle() == (
    	dcl index  : nat;
    	dcl x : nat;
    	for counter = 1 to len deck do
    	(
    			index  := MATH`rand(52) + 1;
    			if index = 53 then index := 52;
    			x := deck (counter);
    			deck (counter) := deck (index);
    			deck (index) := x;
 					
			);
    );
    
    -- Creates the pyramid
		public createPyramid: () ==> ()
		createPyramid() == (
			workingDeck := deck;
			for i = 1 to 7 do
			(
					dcl s : seq of nat := [];
					for i2 = 1 to i do
					(
							s := s ^ [hd workingDeck];
							workingDeck := tl workingDeck;
					);
					pyramid := pyramid ^ [s];
			);
			pyramid := pyramid ^ [[0,0,0,0,0,0,0,0]];
			stock := workingDeck;
			workingDeck := [];
		);
		
		-- Take a card from the stock and put on the top of waste.
		public drawStock: () ==> ()
		drawStock() == (
			waste := waste ^ [hd stock];
			stock := tl stock;
		);
		
		public pickCard: nat * nat ==> ()
		pickCard(row,col) == (
			IO`println(pyramid(row)(col));
			
		)
		pre len stock >=0;
		
		-- Print the card name.
		public printCard: nat ==> ()
		printCard(index) == (
			dcl suit: String;
			dcl rank: String;
			
			dcl suitI: nat;
			dcl rankI: nat;
			
			if(index rem 13 <> 0) then suitI := (floor (index / 13))+1 else suitI := floor (index / 13);
			
			if(index rem 13 = 0) then rankI := 13 else rankI := index rem 13;
			
			
			suit := suits (suitI);
			
			
			rank := ranks (rankI);
			
			
			IO`print(rank);
			IO`print(" of ");
			IO`print(suit);
		)
		pre 1 <= index and index <= 52;
		
		-- Prints the pyramid TODO: FIX BUGGY
		public printPyramid: () ==> ()
		printPyramid() == (
			for i = 1 to 8 do
			(
				for i2 = 1 to i do
				(
						IO`print(pyramid (i)(i2));
				);
			);
		);
		
		-- Selects two cards and checks values.
		public selectCards: nat * nat ==> ()
		selectCards(a,b) == (
				dcl valueA: nat;
				dcl valueB: nat;
				
				-- If both cards are valid
				if getCard(a) <> nil and getCard(b) <> nil then 
				(
					if(a rem 13 = 0) then valueA := 13 else valueA := a rem 13;
					if(b rem 13 = 0) then valueB := 13 else valueB := b rem 13;
				
					if valueA + valueB = 13 then ( 
					removeCard(a);
					removeCard(b);
					IO`println("Sucess.")
					)
					else IO`println("Cannot do that.");
					
				) 
				else IO`println("One ore two invalid cards.");
		);
		
		-- Search for a card in the pyramid, return nil if not found in the pyramid or if still has valid childs.
		public getCard: nat ==> [nat]
		getCard(c) == (
			for i = 1 to 7 do
			(
					for i2 = 1 to i do
					(
							if pyramid (i) (i2) = c and pyramid (i+1) (i2) = 0 and pyramid (i+1) (i2+1) = 0 then return c;
					);
			);
			return nil;
		);
		-- Removes a card from the pyramid (turns it into 0)
		private removeCard: nat ==> ()
		removeCard(c) == (
			for i = 1 to 7 do
			(
					for i2 = 1 to i do
					(
							if pyramid (i) (i2) = c then pyramid (i) (i2) := 0;
							if pyramid (1) (1) = 0 then IO`println("Game won.")
					);
			);
		);
		
functions
traces
-- TODO Define Combinatorial Test Traces here
end Game